[tool.poetry]
name = "zeroconf"
version = "0.147.0"
description = "A pure python implementation of multicast DNS service discovery"
authors = ["Paul Scott-Murphy", "William McBrine", "Jakub Stasiak", "J. Nick Koston"]
license = "LGPL-2.1-or-later"
readme = "README.rst"
repository = "https://github.com/python-zeroconf/python-zeroconf"
documentation = "https://python-zeroconf.readthedocs.io"
classifiers=[
	'Development Status :: 5 - Production/Stable',
	'Intended Audience :: Developers',
	'Intended Audience :: System Administrators',
	'Operating System :: POSIX',
	'Operating System :: POSIX :: Linux',
	'Operating System :: MacOS :: MacOS X',
	'Topic :: Software Development :: Libraries',
	'Programming Language :: Python :: 3.9',
	'Programming Language :: Python :: 3.10',
	'Programming Language :: Python :: 3.11',
	'Programming Language :: Python :: 3.12',
	'Programming Language :: Python :: 3.13',
	'Programming Language :: Python :: Implementation :: CPython',
	'Programming Language :: Python :: Implementation :: PyPy',
]
packages = [
    { include = "zeroconf", from = "src" },
]
include = [
    { path = "CHANGELOG.md", format = "sdist" },
    { path = "COPYING", format = "sdist" },
    { path = "docs", format = "sdist" },
    { path = "tests", format = "sdist" },
]
# Make sure we don't package temporary C files generated by the build process
exclude = [ "**/*.c" ]

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/python-zeroconf/python-zeroconf/issues"
"Changelog" = "https://github.com/python-zeroconf/python-zeroconf/blob/master/CHANGELOG.md"

[tool.poetry.build]
generate-setup-file = true
script = "build_ext.py"

[tool.semantic_release]
branch = "master"
version_toml = ["pyproject.toml:tool.poetry.version"]
version_variables = [
    "src/zeroconf/__init__.py:__version__"
]
build_command = "pip install poetry && poetry build"
tag_format = "{version}"

[tool.semantic_release.changelog]
exclude_commit_patterns = [
    "chore*",
    "ci*",
]

[tool.semantic_release.changelog.environment]
keep_trailing_newline = true

[tool.semantic_release.branches.master]
match = "master"

[tool.semantic_release.branches.noop]
match = "(?!master$)"
prerelease = true

[tool.poetry.dependencies]
python = "^3.9"
ifaddr = ">=0.1.7"

[tool.poetry.group.dev.dependencies]
pytest = ">=7.2,<9.0"
pytest-cov = ">=4,<7"
pytest-asyncio = ">=0.20.3,<0.27.0"
cython = "^3.0.5"
setuptools = ">=65.6.3,<81.0.0"
pytest-timeout = "^2.1.0"
pytest-codspeed = "^3.1.0"

[tool.poetry.group.docs.dependencies]
sphinx = "^7.4.7 || ^8.1.3"
sphinx-rtd-theme = "^3.0.2"

[tool.ruff]
target-version = "py39"
line-length = 110

[tool.ruff.lint]
ignore = [
    "S101", # use of assert
    "S104",  # S104 Possible binding to all interfaces
    "PLR0912", # too many to fix right now
    "TID252", # skip
    "PLR0913", # too late to make changes here
    "PLR0911", # would be breaking change
    "TRY003", # too many to fix
    "SLF001", # design choice
    "PLR2004" , # too many to fix
    "PGH004",  # too many to fix
    "PGH003", # too many to fix
    "SIM110", # this is slower
    "PYI034", # enable when we drop Py3.10
    "PYI032", # breaks Cython
    "PYI041",  # breaks Cython
    "PERF401", # Cython: closures inside cpdef functions not yet supported
]
select = [
    "ASYNC", # async rules
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "S",   # flake8-bandit
    "F",   # pyflake
    "E",   # pycodestyle
    "W",   # pycodestyle
    "UP",  # pyupgrade
    "I",   # isort
    "RUF", # ruff specific
    "FLY", # flynt
    "G", # flake8-logging-format   ,
    "PERF", # Perflint
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL", # pylint
    "PT", # flake8-pytest-style
    "PTH", # flake8-pathlib
    "PYI", # flake8-pyi
    "RET", # flake8-return
    "RSE", # flake8-raise    ,
    "SIM", # flake8-simplify
    "SLF", # flake8-self
    "SLOT", # flake8-slots
    "T100", # Trace found: {name} used
    "T20", # flake8-print
    "TID", # Tidy imports
    "TRY", # tryceratops
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*" = [
    "D100",
    "D101",
    "D102",
    "D103",
    "D104",
    "S101",
    "SLF001",
    "PLR2004", # too many to fix right now
    "PT011", # too many to fix right now
    "PT006", # too many to fix right now
    "PGH003", # too many to fix right now
    "PT007", # too many to fix right now
    "PT027",  # too many to fix right now
    "PLW0603" , # too many to fix right now
    "PLR0915", # too many to fix right now
    "FLY002", # too many to fix right now
    "PT018", # too many to fix right now
    "PLR0124", # too many to fix right now
    "SIM202" , # too many to fix right now
    "PT012" , # too many to fix right now
    "TID252", # too many to fix right now
    "PLR0913", # skip this one
    "SIM102" , # too many to fix right now
    "SIM108", # too many to fix right now
    "T201", # too many to fix right now
    "PT004", # nice to have
]
"bench/**/*" = [
    "T201", # intended
]
"examples/**/*" = [
    "T201", # intended
]
"setup.py" = ["D100"]
"conftest.py" = ["D100"]
"docs/conf.py" = ["D100"]

[tool.pylint.BASIC]
class-const-naming-style = "any"
good-names = [
    "e",
    "er",
    "h",
    "i",
    "id",
    "ip",
    "os",
    "n",
    "rr",
    "rs",
    "s",
    "t",
    "wr",
    "zc",
    "_GLOBAL_DONE",
]

[tool.pylint."MESSAGES CONTROL"]
disable = [
    "duplicate-code",
    "fixme",
    "format",
    "missing-class-docstring",
    "missing-function-docstring",
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-instance-attributes",
    "too-many-public-methods"
]


[tool.pytest.ini_options]
addopts = "-v -Wdefault --cov=zeroconf --cov-report=term-missing:skip-covered"
pythonpath = ["src"]

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "@overload",
    "if TYPE_CHECKING",
    "raise NotImplementedError",
]


[tool.isort]
profile = "black"
known_first_party = ["zeroconf", "tests"]

[tool.mypy]
warn_unused_configs = true
check_untyped_defs = true
disallow_any_generics = false  # turn this on when we drop 3.7/3.8 support
disallow_incomplete_defs = true
disallow_untyped_defs = true
warn_incomplete_stub = true
mypy_path = "src/"
show_error_codes = true
warn_redundant_casts = false  # Activate for cleanup.
warn_return_any = true
warn_unreachable = true
warn_unused_ignores = false  # Does not always work properly, activate for cleanup.
extra_checks = true
strict_equality = true
strict_bytes = true  # Will be true by default with mypy v2 release.
exclude = [
    'docs/*',
    'bench/*',
]

[[tool.mypy.overrides]]
module = "tests.*"
allow_untyped_defs = true

[[tool.mypy.overrides]]
module = "docs.*"
ignore_errors = true
allow_untyped_defs = true

[[tool.mypy.overrides]]
module = "bench.*"
ignore_errors = true

[build-system]
# 1.5.2 required for https://github.com/python-poetry/poetry/issues/7505
requires = ['setuptools>=65.4.1', 'wheel', 'Cython>=3.0.8', "poetry-core>=1.5.2"]
build-backend = "poetry.core.masonry.api"

[tool.codespell]
ignore-words-list = ["additionals", "HASS"]

[tool.cython-lint]
max-line-length = 110
ignore = ['E501'] # too many to fix right now
